type Query {
    me: User!
    allPlayers(filter: String): [Player!]!
    leagueLeaders(timeFrame: String): [LeagueLeader!]!
    getPlayerStats(playerIds: [ID!]!): [Player!]!
    getTeam(teamId: String): Team
    getUsers(userIds: [ID!]!): [User!]!
}

type Mutation {
    register(name: String!, email: String!, password: String!): AuthPayLoad
    login(email: String!, password: String!): AuthPayLoad
    saveTeam(playerIds: [ID!]!, teamId: String!): Team
    addTeam(name: String!): Team
    createFantasyLeague(name: String!): FantasyLeague
    addFantasyLeagueMember(leagueId: ID!, teamId: ID!): Boolean
    removeFantasyLeagueMember(leagueId: ID!, teamId: ID!): Boolean
}

type User {
    id: ID!
    email: String!
    name: String!
    teams: [Team!]!
}

type AuthPayLoad {
    token: String
    teamIds: [String!]!
}

type Team {
    id: ID!
    name: String!
    owner: User!
    players(timeFrame: String): [Player!]!
}

type Player {
    id: ID!
    firstName: String!
    lastName: String!
    fullName: String!
    position: String!
    currentTeam: NbaTeam
    imageSrc: String
    stats: [Stat!]
    gameCountThisWeek: Int
    injury: Injury
}

type FantasyLeague {
    id: ID!
    name: String!
    admin: User!
    teams: [Team!]!
}

type Injury {
    playingProbability: String!
    description: String!
}

type Stat {
    category: String!
    value: Float!
}

type NbaTeam {
    id: ID!
    abbreviation: String!
}

type LeagueLeader {
    stat: String!
    leaders: [Player!]!
}
